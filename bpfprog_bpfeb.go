// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type BpfProgLpmKeyV4 struct {
	_         structs.HostLayout
	Prefixlen uint32
	Addr      uint32
}

// LoadBpfProg returns the embedded CollectionSpec for BpfProg.
func LoadBpfProg() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfProgBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load BpfProg: %w", err)
	}

	return spec, err
}

// LoadBpfProgObjects loads BpfProg and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfProgObjects
//	*BpfProgPrograms
//	*BpfProgMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfProgObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpfProg()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfProgSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgSpecs struct {
	BpfProgProgramSpecs
	BpfProgMapSpecs
	BpfProgVariableSpecs
}

// BpfProgProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgProgramSpecs struct {
	GeoipMark *ebpf.ProgramSpec `ebpf:"geoip_mark"`
}

// BpfProgMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgMapSpecs struct {
	FwmarkConf    *ebpf.MapSpec `ebpf:"fwmark_conf"`
	NonCnPrefixes *ebpf.MapSpec `ebpf:"non_cn_prefixes"`
}

// BpfProgVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgVariableSpecs struct {
}

// BpfProgObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfProgObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfProgObjects struct {
	BpfProgPrograms
	BpfProgMaps
	BpfProgVariables
}

func (o *BpfProgObjects) Close() error {
	return _BpfProgClose(
		&o.BpfProgPrograms,
		&o.BpfProgMaps,
	)
}

// BpfProgMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfProgObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfProgMaps struct {
	FwmarkConf    *ebpf.Map `ebpf:"fwmark_conf"`
	NonCnPrefixes *ebpf.Map `ebpf:"non_cn_prefixes"`
}

func (m *BpfProgMaps) Close() error {
	return _BpfProgClose(
		m.FwmarkConf,
		m.NonCnPrefixes,
	)
}

// BpfProgVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfProgObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfProgVariables struct {
}

// BpfProgPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfProgObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfProgPrograms struct {
	GeoipMark *ebpf.Program `ebpf:"geoip_mark"`
}

func (p *BpfProgPrograms) Close() error {
	return _BpfProgClose(
		p.GeoipMark,
	)
}

func _BpfProgClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpfprog_bpfeb.o
var _BpfProgBytes []byte
